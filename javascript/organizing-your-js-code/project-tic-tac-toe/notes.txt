gameboard: Module (single instance)
    _squares = player[]
    checkEndStatus() - checks for 3 in a row OR tie
    render() - render 

player(name, symbol): Factory (multiple instances)
    _name = string
    setName()
    _symbol = 'X' or 'O' (could choose any symbol perhaps by saving character code value instead)

aiPlayer: Factory (multipe instances if user can choose both players as AI)

game: Module (single instance)
    _playerOne = player factory
    _playerTwo = player factory
    _bIsPlayerOneTurn = true
    _gameBoard = Module (single instance)
    _endGameMessageElement = Element to display end game results message
    _handleStartClick() - starts or restarts to a new game
    _handlePlayerSelection() - adds current player symbol to gameboard square

Need To Add:

- allow Players to put in their name
- include button to start and restart the game
- add display element that displays end game message

To-Do List:

- Add custom form validation to check that new Player name or symbol do NOT match the other player.

- Save player properties to localStorage using Web Storage API.

- Add random flickering animation to neon text

- When Player chooses a spot, play animation of light turning on to reveal symbol

-------------------------------------------------------------------------------

Player: Factory
    element - HTMLElement
    name - String
    symbol - Number (char code)
    getElement(), setElement(newElement)
    getName(), setName(newName) - update element
    getSymbol(), setSymbol(newSymbol) - update element AND update squares

GameSquare: Factory
    element - HTMLElement
    playerSelect - Player|null (Player that selected the square. Null is empty)

GameBoard: Module
    element - HTMLElement - may not need this once Squares are created
    squares - GameSquare[]
    init(boardElement)

Game: Module
    player1 - Player
    player2 - Player
    bIsPlayer1Turn - Boolean
    gameboard - GameBoard
    init(boardElement, playerInfoElement)
        player1.setElement(playerInfoElement.querySelector('player-one'))
        player2.setElement(playerInfoElement.querySelector('player-two'))
        GameBoard.init(boardElement)
    checkForWinner() - checks if either Player has a winning condition
        winning conditions by cell index:
            0,1,2 - top row
            3,4,5 - middle row
            6,7,8 - bottom row
            0,3,6 - left column
            1,4,7 - middle column
            2,5,8 - right column
            0,4,8 - back slash
            2,4,6 - forward slash

DisplayController: Module
